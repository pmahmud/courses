--------------------------------------------------------------------------------------------------
:: Mongoose for NodeJS and MongoDB ::
https://app.pluralsight.com/player?course=mongoose-for-nodejs-mongodb
--------------------------------------------------------------------------------------------------
../source/mongoose
--------------------------------------------------------------------------------------------------
12:35 PM 2/7/2017

- robomongo : visual browsers like phpMyAdmin
- express -H : create an express with Hogan engine

:: docker-compose.yml ::
db:
    image: mongo:latest
    ports:
        - "27017:27017"
    restart: always

web:
    build: .
    volumes:
        - ./:/app
    ports:
        - "3000:3000"
    links:
        - db
    command: node /app/bin/www

:: DockerFile ::
FROM node:6.6.0

WORKDIR /app

COPY package.json /app/package.json
RUN npm i

EXPOSE 3000

:: Schema ::

var mongoose = require('mongoose');

var user = new mongoose.Schema({
	name: String,
	phone: Number
	createdOn: Date,
	isActive: Boolean
});

:: Data Type ::

~Mongosse_Type			~JS_Type
String					String
Number					Number
Date					Object
Buffer					Object
Boolean					Boolean
Mixed					Object
ObjectId				Object
Array					Array(Object)


-- const customerSchema = new Schema({
	name:{
		first:	String,
		last:	String
	},
	address: [addressSchema],
	createdOn: {type: Date, default:Date.now},
	isActive: {type: Boolean, default:true}
});

const addressSchema = new Schema({
	street: String,
	city: String,
	zipcode: Number
});

> var Customer = mongoose.model('Customer', customerSchema);

- break into child schemas, looks cleaner

- if you need to have field name type then it needs to be:
~type: {type: String} 

  
  
~mongoose Schema has an add method:

    > standupSchema.add({blah: foo});
	

-------------------------------------------------------------------	
:: Model.find ::
-------------------------------------------------------------------	
:: Model.find(conditions, [fields], [options], [callback]) ::
-------------------------------------------------------------------	

> query = Standup.find() @find_everything


> Standup.find(function(err, results){
	//handle error or results
});

> Standup.find({memberName: 'David'}, function(err, results){
	//dostuff
});

> Standup.find( {memberName:'Mary'}, 'memberName impediment', function(err, result){
	//dostuff
});

> query = Standup.findOne( //optional );
> query.exec(function(err, result){ //do_stuff })
  
 > query = Standup.findById(id);
   query.exec(function(err, result){ //do_stuff })

> query = Standup.findById(id, '-impediment');
query.exec(function(err, result){ //do_stuff })


$gt greater than
$gte greater than or equal to
$in exists in
$lt less than
$lte less than or equal to
$ne not equal to
$nin does not exist

  
 
Custoomer.find({discount: { $gte: 10 }, function(err,res) {
	if(err) throw err;
	console.log(results);
}) 

Custoomer.find({discount: { $gte: 10, $lt: 20}, function(err,res) {
	if(err) throw err;
	console.log(results);
}) 

 
-------------------------------------------------------------------	
:: Model.where(path, val) ::
-------------------------------------------------------------------	
Custoomer.where('discount').gte(10).lt(20).exec(function(err,res) {
	if(err) throw err;
	console.log(results);
}) 

Custoomer.where('discount').gte(10).lt(20)
.where('zipcode','98000')
.exec(function(err,res) {
	if(err) throw err;
	console.log(results);
}) 

 
 
 :: Update ::
 
 Standup.findById(id).exec(function(err,res){
	if(err) return errorHandler(err);
	
	doc.impediment('None');
	doc.save(function(err){
		if(err) return errorHandler(err);
		console.info('Document updated');
	});
 }
 
 
~hello_world
$hi_there
!be_careful_out_there
^This_might_be_tricky
@watchout_for_at_signs
#I_think_this_might_be_a_hoax
//comment_your_code
https://www.google.com
-- hello world
* item 1.
* item 2.
* item 3.
:: hello world ::
> hello_world.
note: hello.
attn: hello.
`hey there hey there`
[ header 1]
| header 2 |
] header 3 [